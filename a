template <typename T>
int num_nodos(const Arbin<T>& a){

return num_nodos(a,a.getRaiz());

}
template <typename T>
int num_nodos(const Arbin<T>& a, const typename Arbin<T>::Iterador& r){
    if(r.arbolVacio()) //el Ã¡rbol no cambia, el que puede cambiar a vacio
        return 0; //es el iterador "r"
    else
    {
        return (1 + num_nodos(a,a.subIzq(r)) + num_nodos(a,a.subDer(r)));
    }
}
bool comprobar_contrasenia(const Arbin<T>&a, const typename Arbin<T>::Iterador& r,string nuevo,string aux)
{
    if(!r.arbolVacio())
    {
        aux+=r.observar();
        if(a.subDer(r).arbolVacio() && a.subIzq(r).arbolVacio())
        {
            //cout << aux << " nuevo: " << nuevo <<endl;
            if(aux==nuevo)
                return true;
        }
        else if(!a.subDer(r).arbolVacio() || !a.subIzq(r).arbolVacio())
            return (comprobar_contrasenia(a,a.subDer(r),nuevo,aux) || comprobar_contrasenia(a,a.subIzq(r),nuevo,aux));
        else if(!a.subIzq(r).arbolVacio())
            return (comprobar_contrasenia(a,a.subIzq(r),nuevo,aux));
        else
            return (comprobar_contrasenia(a,a.subDer(r),nuevo,aux));
    }
    return false;
}
